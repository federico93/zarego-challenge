service: test-serverless-framework
frameworkVersion: '3'

custom:
  tableName: '${sls:stage}-loyalty-cards-table'
  bucketName: '${sls:stage}-loyalty-cards-bucket'
  queueName: '${sls:stage}-loyalty-cards-queue'
  # Local DynamoDB settings
  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
  # Local S3 settings
  s3:
    host: localhost
    directory: /tmp
  # Local SQS settings
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: us-east-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ LoyaltyCardsTable, Arn ]
  environment:
    STAGE: ${sls:stage}
    LOYALTY_CARDS_TABLE_NAME: ${self:custom.tableName}
    LOYALTY_CARDS_BUCKET_NAME: ${self:custom.bucketName}
    LOYALTY_CARDS_QUEUE_NAME: ${self:custom.queueName}
    LOYALTY_CARDS_QUEUE_URL: !Ref LoyaltyCardsQueue
    DEV_LOYALTY_CARDS_QUEUE_URL: ${env:DEV_LOYALTY_CARDS_QUEUE_URL}
    DB_HANDLER_PROVIDER: ${env:DB_HANDLER_PROVIDER}
    AWS_REGION: ${env:AWS_REGION}
    DYNAMO_DB_ENDPOINT: ${env:DYNAMO_DB_ENDPOINT}
    DYNAMO_DB_ACCESS_KEY: ${env:DYNAMO_DB_ACCESS_KEY}
    DYNAMO_DB_SECRET_KEY: ${env:DYNAMO_DB_SECRET_KEY}

    FILES_HANDLER_PROVIDER: ${env:FILES_HANDLER_PROVIDER}
    S3_ENDPOINT: ${env:S3_ENDPOINT}
    S3_ACCESS_KEY: ${env:S3_ACCESS_KEY}
    S3_SECRET_KEY: ${env:S3_SECRET_KEY}
    QUEUE_HANDLER_PROVIDER: ${env:QUEUE_HANDLER_PROVIDER}
    SQS_ENDPOINT: ${env:SQS_ENDPOINT}
    SQS_ACCESS_KEY: ${env:SQS_ACCESS_KEY}
    SQS_SECRET_KEY: ${env:SQS_SECRET_KEY}

functions:
  createLoyaltyCard:
    handler: src/httpHandler.createLoyaltyCard
    events:
      - httpApi:
          path: /loyalty-cards
          method: post
    # TO-DO: Add Dead Letter Queue
  findLoyaltyCard:
    handler: src/httpHandler.findLoyaltyCard
    events:
      - httpApi:
          path: /loyalty-cards/{cardNumber}
          method: get
  listLoyaltyCards:
    handler: src/httpHandler.listLoyaltyCards
    events:
      - httpApi:
          path: /loyalty-cards
          method: get
  newLoyaltyCardsFile:
    handler: src/listeners/newLoyaltyCardsFileListener.handler
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv
  newLoyaltyCardsQueueMessage:
    handler: src/listeners/newLoyaltyCardsQueueMessageListener.handler
    events:
      - sqs:
          arn:
            !GetAtt LoyaltyCardsQueue.Arn

resources:
  Resources:
    LoyaltyCardsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: cardNumber
            AttributeType: S
        KeySchema:
          - AttributeName: cardNumber
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    LoyaltyCardsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    LoyaltyCardsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}

plugins:
  - serverless-plugin-typescript
  - serverless-s3-local
  - serverless-offline-sqs
  - serverless-offline
  - serverless-dynamodb
